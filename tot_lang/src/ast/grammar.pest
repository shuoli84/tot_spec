WHITESPACE = _{ " "| "\t" | line_break }
line_break = { "\r" | "\n" | "\r\n" }
block_comment = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
line_comment = @{ "//" ~ (!line_break ~ ANY)*}
COMMENT = _{block_comment | line_comment}

keywords = { "let" | "input" | "return" | "if" | "fn" | "for" | "as" }

statement = { (declare_and_bind | bind | return_statement | expression) ~ ";" }

// the last expression is the block's return
block = { "{" ~ statement* ~ block_value? ~ "}" }
block_value = { expression }

declare_and_bind = {
  "let" ~ identifier ~ (":" ~ path)? ~ "=" ~ expression
}
bind = { reference ~ "=" ~ expression }
return_statement = {
  "return" ~ expression
}

expression = { literal | array_expression | call_exp | convert_exp | if_exp | for_exp | reference | block }
array_expression = { "[" ~ expression? ~ ("," ~ expression)* ~ "]" }
call_exp = { path ~ "(" ~ expression? ~ ("," ~ expression)* ~ ")"}
convert_exp = { reference ~ "as" ~ path }

// if related rules
if_exp = {"if" ~ if_condition ~ if_block ~ ("else" ~ if_else_block)? }
if_condition = { expression }
if_block = { block }
if_else_block = { block }

for_exp = { "for" ~ for_item ~ "in" ~ for_values ~ block }
for_item = { identifier }
for_values = { expression }

literal = { string_literal | number_literal | bool_literal }
json_char_double_quote = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}
string_inner_double_quote = @{ json_char_double_quote* }
string_literal = ${ ("\"" ~ string_inner_double_quote ~ "\"") }
bool_literal = { "true" | "false" }
number_literal = @{ "-"? ~ ASCII_DIGIT+ ~ "."? ~ ASCII_DIGIT* ~ ("E" ~ "-"? ~ ASCII_DIGIT+)? ~ !symbol_char }

identifier = @{ !keywords ~ symbol_char+ }
symbol_char = _{ ASCII_ALPHANUMERIC | "_" }

reference = {identifier ~ ("." ~ identifier)*}
path = @{identifier ~ ("::" ~ identifier)*}
// if ret omitted, then it is ()
func_signature = { "fn" ~ identifier ~ "(" ~ ( (func_param ~ ",")* ~ func_param ~ ","? )? ~ ")" ~ func_ret? }
func_ret = { "->" ~ path }
func_param = { identifier ~ ":" ~ path }
func_body = { block }
func = { func_signature ~ func_body }

file = { func* }